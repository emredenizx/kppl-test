[{"C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\index.js":"1","C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\reportWebVitals.js":"2","C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\App.js":"3","C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\components\\Section\\index.js":"4","C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\components\\Section\\Section.js":"5","C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\components\\mock-data.js":"6","C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\api\\api.config.js":"7","C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\components\\mock-options.js":"8","C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\components\\Line\\index.js":"9","C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\components\\Line\\Line.js":"10","C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\context\\data.context.js":"11","C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\context\\actions.js":"12","C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\utils\\index.js":"13","C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\context\\data.reducer.js":"14"},{"size":500,"mtime":1611876001342,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":1606741828331,"results":"17","hashOfConfig":"16"},{"size":179,"mtime":1611965605169,"results":"18","hashOfConfig":"16"},{"size":56,"mtime":1611849441277,"results":"19","hashOfConfig":"16"},{"size":1517,"mtime":1611966877268,"results":"20","hashOfConfig":"16"},{"size":4716,"mtime":1611849629508,"results":"21","hashOfConfig":"16"},{"size":454,"mtime":1611886608727,"results":"22","hashOfConfig":"16"},{"size":1191,"mtime":1611946927342,"results":"23","hashOfConfig":"16"},{"size":48,"mtime":1611935380324,"results":"24","hashOfConfig":"16"},{"size":2362,"mtime":1611962368147,"results":"25","hashOfConfig":"16"},{"size":1104,"mtime":1611949562950,"results":"26","hashOfConfig":"16"},{"size":49,"mtime":1611946662094,"results":"27","hashOfConfig":"16"},{"size":422,"mtime":1611946413201,"results":"28","hashOfConfig":"16"},{"size":357,"mtime":1611949385222,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"adn0uj",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},"C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\index.js",[],["62","63"],"C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\reportWebVitals.js",[],"C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\App.js",[],"C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\components\\Section\\index.js",[],"C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\components\\Section\\Section.js",[],"C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\components\\mock-data.js",[],"C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\api\\api.config.js",[],"C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\components\\mock-options.js",[],"C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\components\\Line\\index.js",[],"C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\components\\Line\\Line.js",["64","65"],"import React, { useCallback, useEffect, useState } from \"react\";\r\nimport { getSuggestions, mock_suggestions } from \"../../api/api.config\";\r\n\r\nimport styles from './Line.module.css'\r\n\r\nconst Line = ({ line }) => {\r\n\r\n  const { data } = line;\r\n  const [options, setOptions] = useState(null)\r\n  const [optionText, setOptionText] = useState([])\r\n\r\n\r\n\r\n  /* const getData = useCallback(() => {\r\n    const data = element.data.map(element => structure.find((item) => item.id === element));\r\n    setData({\r\n      ...element,\r\n      elements: data\r\n    })\r\n  }, [element, structure])\r\n\r\n  useEffect(() => {    \r\n    getData()\r\n  }, [getData])\r\n\r\n  console.log('elements', data) */\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      data.forEach(element => {\r\n        if (element.original.want) {\r\n          const params = {\r\n            \"want\": element.original.want,\r\n            \"active\": ['']\r\n          }\r\n\r\n          const response = mock_suggestions(params)\r\n          const options = response;\r\n\r\n          setOptions(prev => ({\r\n            ...prev,\r\n            [element.original.id]: options\r\n          }))\r\n\r\n        } else {\r\n          return\r\n        }\r\n\r\n      });\r\n    }\r\n  }, [data])\r\n\r\n  const onClick = (name) => {\r\n    setOptionText([...optionText, {\r\n      data:{\r\n      data:[''],\r\n      properties: { name },\r\n      type: 'text'}\r\n    }])\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className={styles.container}>\r\n        {\r\n          data && data.map(element =>\r\n            <div\r\n              className={styles.element}\r\n              key={element.id}>\r\n              <h2 className='label'>\r\n                {element.properties.name}\r\n              </h2>\r\n              {options && options[element.original.id] &&\r\n                <div className={styles.options}>\r\n                  <ul>\r\n                    {options[element.original.id].map(option =>\r\n                      <li\r\n                        key={option.id}\r\n                        onClick={() => onClick(option.name)}\r\n                      >\r\n                        {option.name}\r\n                      </li>\r\n                    )}\r\n                  </ul>\r\n                </div>\r\n              }\r\n              {optionText && optionText.map(option => <Line line={option} />)}\r\n            </div>)\r\n        }\r\n      </div>\r\n      <div></div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Line;\r\n","C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\context\\data.context.js",["66"],"import React, { createContext, useReducer, useEffect, useCallback, useState } from 'react'\r\nimport DataReducer from \"./data.reducer\";\r\nimport { mock } from \"../components/mock-data\";\r\nimport { mapChildren } from \"../utils\";\r\nimport * as actions from \"./actions\";\r\n\r\nconst init = {\r\n    structure: null,\r\n    active_options: [],\r\n    location: []\r\n}\r\n\r\nexport const Context = createContext();\r\n\r\nexport const ContextProvider = ({ children }) => {\r\n\r\n    const [data, dispatch] = useReducer(DataReducer, init);  \r\n\r\n    const setData = useCallback((structure) => {\r\n        const section = structure.find((item) => item.type === \"section\");\r\n        const section_data = mapChildren(section, structure)\r\n\r\n        dispatch({\r\n            type: actions.SET_STRUCTURE,\r\n            payload: section_data\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const response = mock.data.structure;\r\n        setData(response);\r\n    }, [setData]);\r\n\r\n\r\n    return (\r\n        <Context.Provider value={{\r\n            data\r\n        }}\r\n        >\r\n            {children}\r\n        </Context.Provider>\r\n    );\r\n}",["67","68"],"C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\context\\actions.js",[],"C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\utils\\index.js",[],"C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\context\\data.reducer.js",[],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":1,"column":17,"nodeType":"75","messageId":"76","endLine":1,"endColumn":28},{"ruleId":"73","severity":1,"message":"77","line":2,"column":10,"nodeType":"75","messageId":"76","endLine":2,"endColumn":24},{"ruleId":"73","severity":1,"message":"78","line":1,"column":68,"nodeType":"75","messageId":"76","endLine":1,"endColumn":76},{"ruleId":"69","replacedBy":"79"},{"ruleId":"71","replacedBy":"80"},"no-native-reassign",["81"],"no-negated-in-lhs",["82"],"no-unused-vars","'useCallback' is defined but never used.","Identifier","unusedVar","'getSuggestions' is defined but never used.","'useState' is defined but never used.",["81"],["82"],"no-global-assign","no-unsafe-negation"]