[{"C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\index.js":"1","C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\reportWebVitals.js":"2","C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\App.js":"3","C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\components\\Section\\index.js":"4","C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\components\\Section\\Section.js":"5","C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\components\\mock-data.js":"6","C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\api\\api.config.js":"7","C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\components\\mock-options.js":"8","C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\components\\Line\\index.js":"9","C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\components\\Line\\Line.js":"10","C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\context\\data.context.js":"11","C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\context\\actions.js":"12","C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\utils\\index.js":"13","C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\context\\data.reducer.js":"14"},{"size":500,"mtime":1611876001342,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":1606741828331,"results":"17","hashOfConfig":"16"},{"size":288,"mtime":1611948438175,"results":"18","hashOfConfig":"16"},{"size":56,"mtime":1611849441277,"results":"19","hashOfConfig":"16"},{"size":2230,"mtime":1611953763239,"results":"20","hashOfConfig":"16"},{"size":4716,"mtime":1611849629508,"results":"21","hashOfConfig":"16"},{"size":454,"mtime":1611886608727,"results":"22","hashOfConfig":"16"},{"size":1191,"mtime":1611946927342,"results":"23","hashOfConfig":"16"},{"size":48,"mtime":1611935380324,"results":"24","hashOfConfig":"16"},{"size":2362,"mtime":1611962368147,"results":"25","hashOfConfig":"16"},{"size":1104,"mtime":1611949562950,"results":"26","hashOfConfig":"16"},{"size":49,"mtime":1611946662094,"results":"27","hashOfConfig":"16"},{"size":422,"mtime":1611946413201,"results":"28","hashOfConfig":"16"},{"size":357,"mtime":1611949385222,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"adn0uj",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\index.js",[],["61","62"],"C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\reportWebVitals.js",[],"C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\App.js",[],"C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\components\\Section\\index.js",[],"C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\components\\Section\\Section.js",["63","64","65","66"],"import React, { useCallback, useContext, useEffect, useState } from \"react\";\r\nimport Line from \"../Line\";\r\nimport { Context } from \"../../context/data.context\";\r\nimport { mock } from \"../mock-data\";\r\n\r\n\r\nconst Section = () => {\r\n\r\n  /* const [options, setOptions] = useState({\r\n    active:['op-slp-1']\r\n  }); */\r\n\r\n  const { data } = useContext(Context)\r\n  const structure = data.structure\r\n\r\n  console.log('MAIN', data)\r\n\r\n  //const [active, setActive] = useState(0)\r\n\r\n  /*   const setData = useCallback((structure) => {\r\n  \r\n      const section = structure.find((item) => item.type === \"section\");\r\n      const section_data = section.data.map(element => structure.find((item) => item.id === element));\r\n  \r\n      setStructure({\r\n        section: {\r\n          ...section,\r\n          data: section_data\r\n        },\r\n        elements: structure\r\n      });\r\n    }, []);\r\n  \r\n    useEffect(() => {\r\n      const structure = mock.data.structure;\r\n      setData(structure);\r\n    }, [setData]);\r\n  \r\n    useEffect(() => {\r\n      \r\n      element.data.forEach(element => {\r\n        const params = {\r\n          \"want\": structure.section.original.want,\r\n          \"active\": ['']\r\n        }\r\n  \r\n        const response = mock_suggestions(params)\r\n  \r\n        const options = response;\r\n        setOptions(prev => ({\r\n          ...prev,\r\n          [element.original.id]: options\r\n        }))\r\n  \r\n      });\r\n    }\r\n    }, [element]) */\r\n\r\n  //console.log(structure)\r\n\r\n  return (\r\n    \r\n    <>\r\n      { structure &&\r\n        <div className='section'>\r\n          <h1 className='section-label'>\r\n            {structure.properties.name}\r\n          </h1>\r\n         {/*  <div><ul>{options.map(option => <li>{option}</li>)}</ul></div> */}\r\n          <div className='container'>\r\n            {structure.data.map((line) => (\r\n            <Line\r\n              key={line.id}\r\n              line={line}             \r\n            />\r\n          ))}\r\n          </div>\r\n        </div>\r\n      }\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Section;\r\n\r\n// line has only one element?\r\n// folder data da dolu olabilir mi mesela içinde text \r\n// come in order?\r\n// on purpose 2 folder 2??\r\n// section text de ekleniyor mu\r\n\r\n// test?\r\n// ilk text bağımsız değil mi?","C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\components\\mock-data.js",[],"C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\api\\api.config.js",[],"C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\components\\mock-options.js",[],"C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\components\\Line\\index.js",[],"C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\components\\Line\\Line.js",["67","68"],"C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\context\\data.context.js",["69"],"import React, { createContext, useReducer, useEffect, useCallback, useState } from 'react'\r\nimport DataReducer from \"./data.reducer\";\r\nimport { mock } from \"../components/mock-data\";\r\nimport { mapChildren } from \"../utils\";\r\nimport * as actions from \"./actions\";\r\n\r\nconst init = {\r\n    structure: null,\r\n    active_options: [],\r\n    location: []\r\n}\r\n\r\nexport const Context = createContext();\r\n\r\nexport const ContextProvider = ({ children }) => {\r\n\r\n    const [data, dispatch] = useReducer(DataReducer, init);  \r\n\r\n    const setData = useCallback((structure) => {\r\n        const section = structure.find((item) => item.type === \"section\");\r\n        const section_data = mapChildren(section, structure)\r\n\r\n        dispatch({\r\n            type: actions.SET_STRUCTURE,\r\n            payload: section_data\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const response = mock.data.structure;\r\n        setData(response);\r\n    }, [setData]);\r\n\r\n\r\n    return (\r\n        <Context.Provider value={{\r\n            data\r\n        }}\r\n        >\r\n            {children}\r\n        </Context.Provider>\r\n    );\r\n}","C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\context\\actions.js",[],"C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\utils\\index.js",[],"C:\\Users\\riddle\\MyApps\\kappa-london-test\\src\\context\\data.reducer.js",[],{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":1,"column":17,"nodeType":"76","messageId":"77","endLine":1,"endColumn":28},{"ruleId":"74","severity":1,"message":"78","line":1,"column":42,"nodeType":"76","messageId":"77","endLine":1,"endColumn":51},{"ruleId":"74","severity":1,"message":"79","line":1,"column":53,"nodeType":"76","messageId":"77","endLine":1,"endColumn":61},{"ruleId":"74","severity":1,"message":"80","line":4,"column":10,"nodeType":"76","messageId":"77","endLine":4,"endColumn":14},{"ruleId":"74","severity":1,"message":"75","line":1,"column":17,"nodeType":"76","messageId":"77","endLine":1,"endColumn":28},{"ruleId":"74","severity":1,"message":"81","line":2,"column":10,"nodeType":"76","messageId":"77","endLine":2,"endColumn":24},{"ruleId":"74","severity":1,"message":"79","line":1,"column":68,"nodeType":"76","messageId":"77","endLine":1,"endColumn":76},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"no-unused-vars","'useCallback' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useState' is defined but never used.","'mock' is defined but never used.","'getSuggestions' is defined but never used.","no-global-assign","no-unsafe-negation"]